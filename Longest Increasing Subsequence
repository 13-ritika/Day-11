//https://leetcode.com/problems/longest-increasing-subsequence/
// dp medium

//Normal Recursive app
class Solution {
    public int lengthOfLIS(int[] nums) {
        return count(nums,-1,0);
    }
    public int count(int[] nums, int prev, int curr) {
        
        if(curr==nums.length) return 0;
        int res=0;
        if(prev==-1 || nums[prev]<nums[curr])
            res = 1+ count(nums,curr,curr+1);
        int res2 = count(nums,prev,curr+1);
        return Math.max(res,res2);
    }
}

// tabulation { comparing and finding how many smaller are values present previously than the current index and taking the max of those values if we find a smaller value }
class Solution {
    public int lengthOfLIS(int[] nums) {
        int n= nums.length;
        int dp[] = new int[n];
        dp[0]=1;
        for(int i=1;i<n;i++){
            dp[i]=1;
            for(int j=0;j<i;j++){
                if(nums[j]<nums[i])
                    dp[i]= Math.max(dp[i],dp[j]+1); 
            }
        }
        Arrays.sort(dp);
        return dp[n-1];
    }
}
